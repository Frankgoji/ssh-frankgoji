#! /bin/bash

# Function to read config file and return the correct host or correct server
# NOTE: regex in the config file for servers should be in parentheses
function config_pattern {
    pattern_re=$1
    if [[ $# == 3 && $2 == "-t" ]]; then
        names=$3
        types="tests"
    elif [[ $# == 2 && $2 == "-h" ]]; then
        names=$(sed "4q;d" ~/Documents/personal_projects/sshf/config)
        types="hosts"
    elif [[ $# == 2 && $2 == "-s" ]]; then
        names=$(sed "7q;d" ~/Documents/personal_projects/sshf/config)
        types="servers"
    else
        echo "Usage:"
        echo "      config_pattern [pattern] [-h/-s/-t] [if -t: test sequence]"
        usage
        error
    fi
    IFS=';' read -ra ARR <<< "$names"
    for h in "${ARR[@]}"; do
        if [[ "$h" =~ "(" ]]; then
            sedstring=$(server_regex $h $pattern_re)
            if [[ $sedstring ]]; then
                echo "$sedstring"
                return 0
            fi
        elif [[ "$h" =~ "$pattern_re" ]]; then
            echo "$h"
            return 0
        fi
    done
    error "Pattern \"$pattern_re\" matches no $types"
}

# Given the pattern from the prompt and the config regex pattern, returns the
# correct match if it exists, and the empty string if not. Assumes that there
# was a parenthesis in the config pattern
function server_regex {
    if [[ $# -ne 2 ]]; then
        error "server_regex only accepts two arguments"
    fi
    reg=$1
    pat=$2
    groups=1
    sgroup1="^"
    sgroup2=""
    while [[ $reg ]]; do
        openparen=`expr "$(echo $reg | sed 's/(.*$//')" : '.*'`
        if [[ $openparen -eq 0 ]]; then
            closeparen=$((`expr "$(echo $reg | sed 's/).*$//')" : '.*'` + 1))
            sgroup1="$sgroup1${reg:$openparen:$closeparen}"
            sgroup2="$sgroup2\\$groups"
            reg=${reg:$closeparen}
        elif [[ $openparen -gt 0 ]]; then
            noparens=${reg:0:$openparen}
            sgroup1="$sgroup1$(echo $noparens | sed 's/\(.\)/\1\?/g' | sed 's/\([.]\)/\\\1/g')"
            sgroup2="$sgroup2$noparens"
            reg=${reg:$openparen}
            groups=$(($groups - 1))
        else
            sgroup1="$sgroup1($reg)?"
            sgroup2="$sgroup2$reg"
            reg=""
        fi
        groups=$(($groups + 1))
    done
    sgroup1="$sgroup1$"
    if [[ $(echo $pat | egrep "$sgroup1") ]]; then
        sedres="s/$sgroup1/$sgroup2/"
        echo $(echo $pat | sed -E $sedres)
    else
        echo ""
    fi
    return 0
}

# Function describing the usage for this command
function usage {
    echo "Usage:"
    echo "          sshf [--help/--cp/--fs/--vm/--pc]? [pre-args] host@server [post-args]"
    echo "      --help:     Print this usage message"
    echo "      --cp:       Do scp instead of ssh"
    echo "      --fs:       Do sshfs instead of ssh"
    echo "      --vm:       Take the host and server verbatim; don't check the config"
    echo "      --pc:       Print the command without executing"
    echo "      pre-args:   Any arguments that appear before host@server"
    echo "      host@server The host regex pattern and the server regex pattern"
    echo "      post-args:  Any arguments that appear after host@server"
}

# Function to parse the arguments
function parse_arg {
    COMM="ssh"
    CHECK_CONFIG=true
    AT=""
    PREARGS=""
    POSTARGS=""
    RUN=true
    if [[ "$1" == "--help" ]]; then
        echo usage
        return 0
    fi

    if [[ "$1" == "--cp" ]]; then
        COMM="scp"
        shift
    elif [[ "$1" == "--fs" ]]; then
        COMM="sshfs"
        shift
    fi

    if [[ "$1" == "--vm" ]]; then
        CHECK_CONFIG=false
        shift
    fi

    if [[ "$1" == "--pc" ]]; then
        RUN=false
        shift
    fi

    BEFORE_AT=true
    while [ $# != 0 ]; do
        if [[ "$1" =~ "@" ]]; then
            if [[ $CHECK_CONFIG = false ]]; then
                AT=$1
            else
                host_cap="(^.*)@"
                if [[ $1 =~ $host_cap ]]; then
                    host_pattern=${BASH_REMATCH[1]}
                    AT="$(config_pattern $host_pattern -h)@"
                fi
                if [[ $COMM != "scp" ]]; then
                    server_cap="@(.*$)"
                    if [[ $1 =~ $server_cap ]]; then
                        server_pattern=${BASH_REMATCH[1]}
                        AT="$AT$(config_pattern $server_pattern -s)"
                    fi
                else
                    server_cap="@(.*):"
                    if [[ $1 =~ $server_cap ]]; then
                        server_pattern=${BASH_REMATCH[1]}
                        AT="$AT$(config_pattern $server_pattern -s)"
                    fi
                    file_cap=":(.*$)"
                    if [[ $1 =~ $file_cap ]]; then
                        files=${BASH_REMATCH[1]}
                        AT="$AT:$files"
                    fi
                fi
            fi
            BEFORE_AT=false
        elif [[ "$BEFORE_AT" = true ]]; then
            PREARGS="$PREARGS $1"
        else
            POSTARGS="$POSTARGS $1"
        fi
        shift
    done

    echo $COMM $PREARGS $AT $POSTARGS

    if [[ $RUN == "false" ]]; then
        error
    fi
}

# Error function
function error {
    echo "$@" >&2
    exit 1
}

### Unit Tests ###

# Tests config_pattern to see if it returns the correct pattern, or correctly
# errors.
function test_config_pattern {
    RESULT=$(config_pattern "thing" -t "sometest;helloworld;something")
    if [[ $RESULT == "Not finished" ]]; then
        error "Unimplemented: config_pattern"
    elif [[ $RESULT != "something" ]]; then
        error "config_pattern test failed, got $RESULT"
    fi

    RESULT=$(config_pattern "1" -h)
    if [[ $RESULT != "host1" ]]; then
        error "config_pattern test failed, got $RESULT"
    fi
    RESULT=$(config_pattern "8" -s)
    if [[ $RESULT != "server8" ]]; then
        error "config_pattern test failed, got $RESULT"
    fi
    echo "config_pattern test successfully conducted"
}

# Tests parse_arg to see if it correctly echos the command to be evaluated
function test_parse_arg {
    RESULT=$(parse_arg --cp --vm -xarg abc@efg:something.jpg -nowhere)
    if [[ $RESULT == "Not finished" ]]; then
        error "Unimplemented: parse_arg"
    elif [[ $RESULT != "scp -xarg abc@efg:something.jpg -nowhere" ]]; then
        error "parse_arg test failed, got $RESULT"
    fi

    RESULT=$(parse_arg --fs -sup 1@2 -nup)
    if [[ $RESULT != "sshfs -sup host1@server2 -nup" ]]; then
        error "parse_arg test failed, got $RESULT"
    fi
    echo "parse_arg test successfully conducted"
}

# Tests server_regex to see if it returns the correct string
function test_server_regex {
    pass=0
    RESULT=$(server_regex "(1|2)test(a|b)" "1b")
    if [[ $RESULT != "1testb" ]]; then
        echo "test 1 failed, got $RESULT instead of 1testb"
        pass=$(($pass + 1))
    fi

    RESULT=$(server_regex "(1|2)test(a|b)" "1teb")
    if [[ $RESULT != "1testb" ]]; then
        echo "test 1.1 failed, got $RESULT instead of 1testb"
        pass=$(($pass + 1))
    fi

    RESULT=$(server_regex "(1|2)test(a|b)" "1seb")
    if [[ $RESULT != "" ]]; then
        echo "test 1.2 failed, got $RESULT instead of empty string"
        pass=$(($pass + 1))
    fi

    RESULT=$(server_regex "a(1|3)b(2|4)" "32")
    if [[ $RESULT != "a3b2" ]]; then
        echo "test 2 failed, got $RESULT instead of a3b2"
        pass=$(($pass + 1))
    fi

    RESULT=$(server_regex "a(1|3)b(2|4)" "3b2")
    if [[ $RESULT != "a3b2" ]]; then
        echo "test 2.1 failed, got $RESULT instead of a3b2"
        pass=$(($pass + 1))
    fi

    RESULT=$(server_regex "(svl|bgl|wfd)-junos-d([0-9]{3}).juniper.net" "svl034")
    if [[ $RESULT != "svl-junos-d034.juniper.net" ]]; then
        echo "test 3 failed, got $RESULT instead of svl-junos-d034.juniper.net"
        pass=$(($pass + 1))
    fi

    RESULT=$(server_regex "(svl|bgl|wfd)-junos-d([0-9]{3}).juniper.net" "svld034")
    if [[ $RESULT != "svl-junos-d034.juniper.net" ]]; then
        echo "test 3.1 failed, got $RESULT instead of svl-junos-d034.juniper.net"
        pass=$(($pass + 1))
    fi

    RESULT=$(server_regex "(svl|bgl|wfd)-junos-d([0-9]{3}).juniper.net" "svljunos034")
    if [[ $RESULT != "svl-junos-d034.juniper.net" ]]; then
        echo "test 3.2 failed, got $RESULT instead of svl-junos-d034.juniper.net"
        pass=$(($pass + 1))
    fi

    RESULT=$(server_regex "(svl|bgl|wfd)-junos-d([0-9]{3}).juniper.net" "svldjunos034")
    if [[ $RESULT != "" ]]; then
        echo "test 3.2 failed, got $RESULT instead of empty string"
        pass=$(($pass + 1))
    fi

    RESULT=$(server_regex "(1|3)test(red|blue)" "nomatch")
    if [[ $RESULT != "" ]]; then
        echo "test 4 failed, got $RESULT instead of empty string"
        pass=$(($pass + 1))
    fi

    RESULT=$(server_regex "([0-9]{2})test(red|blue)" "12red")
    if [[ $RESULT != "12testred" ]]; then
        echo "test 5 failed, got $RESULT instead of 12testred"
        pass=$(($pass + 1))
    fi

    if [[ $pass -eq 0 ]]; then
        echo "server_regex test successfully conducted"
    else
        error "$pass tests failed"
    fi
}

##### Main program #####

# For testing purposes, uncomment
# test_config_pattern
# test_parse_arg
# test_server_regex

EXECUTE="$(parse_arg $@)"
if [[ $? -ne 0 ]]; then echo $EXECUTE; error; fi
if [[ $EXECUTE != "usage" ]]; then echo $EXECUTE; fi
eval '$EXECUTE'
